using System;

namespace Nybus.Configuration
{
    public interface IQueueStrategy
    {
        string GetQueueName();
    }

    public class AutoGeneratedNameQueueStrategy : IQueueStrategy
    {
        public string GetQueueName() => Utils.Utilities.GetUniqueNameForApplication();
    }

    public class TemporaryQueueStrategy : IQueueStrategy
    {
        internal static readonly string RabbitMqTemporaryQueueName = "*?temporary=true";
        public string GetQueueName() => RabbitMqTemporaryQueueName;
    }

    public class StaticQueueStrategy : IQueueStrategy
    {
        private readonly string _queueName;

        public StaticQueueStrategy(string queueName)
        {
            if (queueName == null) throw new ArgumentNullException(nameof(queueName));
            _queueName = queueName;
        }

        public string GetQueueName() => _queueName;
    }

    public class GuidQueueStrategy : IQueueStrategy
    {
        public string GetQueueName() => Guid.NewGuid().ToString("N");
    }

    public class PrefixedTemporaryQueueStrategy : IQueueStrategy
    {
        private readonly string _prefix;

        public PrefixedTemporaryQueueStrategy(string prefix)
        {
            if (string.IsNullOrEmpty(prefix))
            {
                throw new ArgumentNullException(nameof(prefix));
            }
            _prefix = prefix;
        }

        public string GetQueueName() => $"{_prefix}-{Guid.NewGuid():N}?temporary=true";
    }
}